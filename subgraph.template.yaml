specVersion: 0.0.2
description: The Graph protocol subgraph for GEB
repository: https://github.com/reflexer-labs/geb-subgraph
schema:
  file: ./schema.graphql
dataSources:
  - name: SAFEEngine
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      address: '{{GEB_SAFE_ENGINE}}'
      abi: SAFEEngine
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/core/safe-engine.ts
      entities:
        - CollateralType
        - SystemState
        - Safe
        - HourlyStats
        - DailyStats
      abis:
        - name: SAFEEngine
          file: ./abis/SAFEEngine.json
      eventHandlers:
        - event: InitializeCollateralType(bytes32)
          handler: handleInitializeCollateralType
        - event: ModifyParameters(bytes32,bytes32,uint256)
          handler: handleModifyParametersCollateralTypeUint
        - event: ModifyParameters(bytes32,uint256)
          handler: handleModifyParametersUint
        - event: ModifyCollateralBalance(bytes32,address,int256)
          handler: handleModifyCollateralBalance
        - event: TransferCollateral(bytes32,address,address,uint256)
          handler: handleTransferCollateral
        - event: TransferInternalCoins(address,address,uint256)
          handler: handleTransferInternalCoins
        - event: ModifySAFECollateralization(bytes32,address,address,address,int256,int256,uint256,uint256,uint256)
          handler: handleModifySAFECollateralization
        - event: TransferSAFECollateralAndDebt(bytes32,address,address,int256,int256,uint256,uint256,uint256,uint256)
          handler: handleTransferSAFECollateralAndDebt
        - event: ConfiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256,uint256)
          handler: handleConfiscateSAFECollateralAndDebt
        - event: SettleDebt(address,uint256,uint256,uint256,uint256,uint256)
          handler: handleSettleDebt
        - event: CreateUnbackedDebt(address,address,uint256,uint256,uint256,uint256,uint256)
          handler: handleCreateUnbackedDebt
        - event: UpdateAccumulatedRate(bytes32,address,int256,uint256,uint256)
          handler: handleUpdateAccumulatedRate
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization
  
  - name: GebSafeManager
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      address: '{{SAFE_MANAGER}}'
      abi: GebSafeManager
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/proxy/safe-manager.ts
      entities:
        - CollateralType
        - SystemState
        - Safe
      abis:
        - name: GebSafeManager
          file: ./abis/GebSafeManager.json
      eventHandlers:
        - event: OpenSAFE(indexed address,indexed address,indexed uint256)
          handler: handleOpenSAFE
        - event: TransferSAFEOwnership(address,uint256,address)
          handler: handleTransferSAFEOwnership
        - event: AllowSAFE(address,uint256,address,uint256)
          handler: handleAllowSAFE
        - event: AllowHandler(address,address,uint256)
          handler: handleAllowHandler
        # Other events in SAFEManager are handled by SAFEEngine

  - name: OracleRelayer
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      address: '{{GEB_ORACLE_RELAYER}}'
      abi: OracleRelayer
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/core/oracle-relayer.ts
      entities:
        - CollateralType
        - SystemState
        - Safe
        - RedemptionPrice
      abis:
        - name: OracleRelayer
          file: ./abis/OracleRelayer.json
        - name: RateSetter
          file: ./abis/RateSetter.json
      eventHandlers:
        - event: UpdateCollateralPrice(bytes32,uint256,uint256,uint256)
          handler: handleUpdateCollateralPrice
        - event: UpdateRedemptionPrice(uint256)
          handler: handleUpdateRedemptionPrice
        - event: ModifyParameters(bytes32,bytes32,address)
          handler: handleModifyParametersCollateralTypeAddress
        - event: ModifyParameters(bytes32,bytes32,uint256)
          handler: handleModifyParametersCollateralTypeUint
        - event: ModifyParameters(bytes32,uint256)
          handler: handleModifyParametersUint
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization
  
  - name: TaxCollector
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      address: '{{GEB_TAX_COLLECTOR}}'
      abi: TaxCollector
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/core/tax-collector.ts
      entities:
        - CollateralType
        - SystemState
      abis:
        - name: TaxCollector
          file: ./abis/TaxCollector.json
        - name: RateSetter
          file: ./abis/RateSetter.json
      eventHandlers:
        - event: ModifyParameters(bytes32,bytes32,uint256) # Type 0
          handler: handleModifyParametersCollateralTypeUint
        - event: ModifyParameters(bytes32,uint256) # Type 1
          handler: handleModifyParametersUint
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization
        
        # Remaining events
        # - event: AddSecondaryReceiver(bytes32,uint256,uint256,uint256,uint256)
        #   handle: handleAddSecondaryReceiver
        # - event: CollectTax(bytes32,uint256,int256)
        #   handle: handleCollectTax
        # - event: DistributeTax(bytes32,address,int256)
        #   handle: handleDistributeTax
        # - event: InitializeCollateralType(bytes32)
        #   handle: handleInitializeCollateralType
        # - event: ModifyParameters(bytes32,address)
        #   handle: handleModifyParameters
        # - event: ModifyParameters(bytes32,uint256,uint256)
        #   handle: handleModifyParameters
        # - event: ModifyParameters(bytes32,uint256,uint256,address)
        #   handle: handleModifyParameters
        # - event: ModifySecondaryReceiver(bytes32,uint256,uint256,uint256,uint256)
        #   handle: handleModifySecondaryReceiver
  
  - name: LiquidationEngine
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      address: '{{GEB_LIQUIDATION_ENGINE}}'
      abi: LiquidationEngine
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/core/liquidation-engine.ts
      entities:
        - CollateralType
        - CollateralAuction
        - EnglishAuctionConfiguration
        - FixedDiscountAuctionConfiguration
      abis:
        - name: LiquidationEngine
          file: ./abis/LiquidationEngine.json
        - name: EnglishCollateralAuctionHouse
          file: ./abis/EnglishCollateralAuctionHouse.json
      eventHandlers:
        - event: Liquidate(indexed bytes32,indexed address,uint256,uint256,uint256,address,uint256)
          handler: handleLiquidate
        - event: ModifyParameters(bytes32,bytes32,address)
          handler: handleModifyParametersCollateralTypeAddress
        - event: ModifyParameters(bytes32,bytes32,uint256)
          handler: handleModifyParametersCollateralTypeUint
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # Remaining events:
        # - event: ConnectSAFESaviour(address)
        #   handler: handleConnectSAFESaviour
        # - event: DisableContract()
        #   handler: handleDisableContract
        # - event: DisconnectSAFESaviour(address)
        #   handler: handleDisconnectSAFESaviour
        # - event: FailedSAFESave(bytes)
        #   handler: handleFailedSAFESave
        # - event: ProtectSAFE(bytes32,address,address)
        #   handler: handleProtectSAFE
        # - event: SaveSAFE(indexed bytes32,indexed address,uint256)
        #   handler: handleSaveSAFE
  
  - name: AccountingEngine
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      address: '{{GEB_ACCOUNTING_ENGINE}}'
      abi: AccountingEngine
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/core/accounting-engine.ts
      entities:
        - SystemState
        - EnglishAuctionConfiguration
        - AccountingEngine 
        - EnglishAuction
      abis:
        - name: AccountingEngine
          file: ./abis/AccountingEngine.json
        - name: DebtAuctionHouse
          file: ./abis/DebtAuctionHouse.json
        - name: PreSettlementSurplusAuctionHouse
          file: ./abis/PreSettlementSurplusAuctionHouse.json
        
      eventHandlers:
        - event: ModifyParameters(bytes32,address)
          handler: handleModifyParametersAddress
        - event: ModifyParameters(bytes32,uint256)
          handler: handleModifyParametersUint
        - event: AuctionDebt(uint256,uint256,uint256)
          handler: handleAuctionDebt
        - event: AuctionSurplus(uint256,uint256,uint256)
          handler: handleAuctionSurplus
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # Remaining events:
        # - event: CancelAuctionedDebtWithSurplus(uint256,uint256,uint256,uint256)
        #   handler: handleCancelAuctionedDebtWithSurplus
        # - event: DisableContract(uint256,uint256,uint256,uint256)
        #   handler: handleDisableContract
        # - event: PopDebtFromQueue(uint256,uint256,uint256)
        #   handler: handlePopDebtFromQueue
        # - event: PushDebtToQueue(uint256,uint256,uint256)
        #   handler: handlePushDebtToQueue
        # - event: SettleDebt(uint256,uint256,uint256)
        #   handler: handleSettleDebt
        # - event: TransferPostSettlementSurplus(address,uint256,uint256)
        #   handler: handleTransferPostSettlementSurplus

  - name: ProxyFactory
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: DSProxyFactory
      address: '{{PROXY_FACTORY}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/proxy/proxy-factory.ts
      entities:
        - UserProxy
      abis:
        - name: DSProxyFactory
          file: ./abis/DSProxyFactory.json
      eventHandlers:
        - event: Created(indexed address,indexed address,address,address)
          handler: handleCreated

  - name: CoinJoin
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: CoinJoin
      address: '{{GEB_COIN_JOIN}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/token/coin-join.ts
      entities:
        - CoinJoin
      abis:
        - name: CoinJoin
          file: ./abis/CoinJoin.json
      eventHandlers:
        - event: Exit(address,address,uint256)
          handler: handleExit
        - event: Join(address,address,uint256)
          handler: handleJoin
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # - event: DisableContract()
        #   handler: handleDisableContract
  
  - name: EthAJoin
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: BasicCollateralJoin
      address: '{{GEB_JOIN_ETH_A}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/token/collateral-join.ts
      entities:
        - CollateralJoin
      abis:
        - name: BasicCollateralJoin
          file: ./abis/BasicCollateralJoin.json
      eventHandlers:
        - event: Exit(address,address,uint256)
          handler: handleExit
        - event: Join(address,address,uint256)
          handler: handleJoin
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # - event: DisableContract()
        #   handler: handleDisableContract

  - name: Coin
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: Coin
      address: '{{GEB_COIN}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/token/coin.ts
      entities:
        - ERC20Balance
        - ERC20Transfer
        - ERC20Allowance
      abis:
        - name: Coin
          file: ./abis/Coin.json
      eventHandlers:
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransfer 
        - event: Approval(indexed address,indexed address,uint256)
          handler: handleApproval 
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization
  
  - name: ProtestPause
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: DSProtestPause
      address: '{{GEB_PAUSE}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/governance/ds-protest-pause.ts
      entities:
        - DsPauseScheduledTransaction

      abis:
        - name: DSProtestPause
          file: ./abis/DSProtestPause.json
      eventHandlers:
        - event: ScheduleTransaction(address,address,bytes32,bytes,uint256)
          handler: handleScheduleTransaction
        - event: AttachTransactionDescription(address,address,bytes32,bytes,uint256,string)
          handler: handleAttachTransactionDescription
        - event: ExecuteTransaction(address,address,bytes32,bytes,uint256)
          handler: handleExecuteTransaction
        - event: AbandonTransaction(address,address,bytes32,bytes,uint256)
          handler: handleAbandonTransaction
        # - event: ChangeDelayMultiplier(uint256)
        #   handler: handleChangeDelayMultiplier
        # - event: LogNote(indexed bytes4,indexed address,indexed bytes32,indexed bytes32,uint256,bytes)
        #   handler: handleLogNote
        # - event: LogSetAuthority(indexed address)
        #   handler: handleLogSetAuthority
        # - event: LogSetOwner(indexed address)
        #   handler: handleLogSetOwner
        # - event: ProtestAgainstTransaction(address,address,bytes32,bytes,uint256)
        #   handler: handleProtestAgainstTransaction
        # - event: SetDelay(uint256)
        #   handler: handleSetDelay
        # - event: SetProtester(address)
        #   handler: handleSetProtester

  - name: EthOsm
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: Osm
      address: '{{FEED_SECURITY_MODULE_ETH}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/oracles/fsm.ts
      entities:
        - FSMUpdate
      abis:
        - name: Osm
          file: ./abis/OSM.json
      eventHandlers:
        - event: UpdateResult(uint256,uint256)
          handler: handleUpdateResult
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # - event: ChangeDelay(uint16)
        #   handler: handleChangeDelay
        # - event: ChangePriceSource(address)
        #   handler: handleChangePriceSource
        # - event: RestartValue()
        #   handler: handleRestartValue
        # - event: Start()
        #   handler: handleStart
        # - event: Stop()
        #   handler: handleStop

  - name: CoinDsm
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: Osm
      address: '{{FEED_SECURITY_MODULE_RAI}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/oracles/fsm.ts
      entities:
        - FSMUpdate
      abis:
        - name: Osm
          file: ./abis/OSM.json
      eventHandlers:
        - event: UpdateResult(uint256,uint256)
          handler: handleUpdateResult
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # - event: ChangeDelay(uint16)
        #   handler: handleChangeDelay
        # - event: ChangePriceSource(address)
        #   handler: handleChangePriceSource
        # - event: RestartValue()
        #   handler: handleRestartValue
        # - event: Start()
        #   handler: handleStart
        # - event: Stop()
        #   handler: handleStop
  
  - name: EthMedianizer
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: Medianizer
      address: '{{MEDIANIZER_ETH}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/oracles/medianizer.ts
      entities:
        - MedianizerUpdate
      abis:
        - name: Medianizer
          file: ./abis/ChainlinkMedianETHUSD.json
      eventHandlers:
        - event:  UpdateResult(uint256,uint256)
          handler: handleUpdateResult
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # - event:  FailRewardCaller(bytes,address,uint256)
        #   handler: handleFailRewardCaller
        # - event:  ModifyParameters(bytes32,address)
        #   handler: handleModifyParameters
        # - event:  ModifyParameters(bytes32,uint256)
        #   handler: handleModifyParameters
        # - event:  RewardCaller(address,uint256)
        #   handler: handleRewardCaller
  
  - name: CoinMedianizer
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: Medianizer
      address: '{{MEDIANIZER_RAI}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/oracles/medianizer.ts
      entities:
        - MedianizerUpdate
      abis:
        - name: Medianizer
          file: ./abis/UniswapConsecutiveSlotsMedianRAIUSD.json
        - name: UniswapPair
          file: ./abis/UniswapPair.json
      eventHandlers:
        - event:  UpdateResult(uint256,uint256)
          handler: handleUpdateResult
        - event:  ModifyParameters(bytes32,address)
          handler: handleModifyParameters
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # - event:  FailRewardCaller(bytes,address,uint256)
        #   handler: handleFailRewardCaller
        # - event:  ModifyParameters(bytes32,uint256)
        #   handler: handleModifyParameters
        # - event:  RewardCaller(address,uint256)
        #   handler: handleRewardCaller

  - name: GebPrintingPermissions
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: GebPrintingPermissions
      address: '{{PRINTING_PERMISSIONS_REGISTRY}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/governance/printing-permission.ts
      entities:
        - GebAuthorization
      abis:
        - name: GebPrintingPermissions
          file: ./abis/GebPrintingPermissions.json
      eventHandlers:
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

  - name: GlobalSettlement
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: GlobalSettlement
      address: '{{GEB_GLOBAL_SETTLEMENT}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/core/global-settlement.ts
      entities:
        - GebAuthorization
      abis:
        - name: GlobalSettlement
          file: ./abis/GlobalSettlement.json
      eventHandlers:
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

  - name: StabilityFeeTreasury
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: StabilityFeeTreasury
      address: '{{GEB_STABILITY_FEE_TREASURY}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/core/stability-fee-treasury.ts
      entities:
        - GebAuthorization
      abis:
        - name: StabilityFeeTreasury
          file: ./abis/StabilityFeeTreasury.json
      eventHandlers:
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

  - name: ProtocolTokenAuthority
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: ProtocolTokenAuthority
      address: '{{PROTOCOL_TOKEN_AUTHORITY}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/governance/protocol-token-authority.ts
      entities:
        - GebAuthorization
      abis:
        - name: ProtocolTokenAuthority
          file: ./abis/ProtocolTokenAuthority.json
      eventHandlers:
        - event: AddAuthorization(indexed address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(indexed address)
          handler: handleRemoveAuthorization
        # - event: SetOwner(indexed address)
        #   handler: handleSetOwner
        # - event: SetRoot(indexed address)
        #   handler: handleSetRoot
  
  - name: UniswapRollingDistributionIncentives 
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: GebUniswapRollingDistributionIncentives
      address: '{{GEB_UNISWAP_INCENTIVE}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/incentive/uniswap-incentive.ts
      entities:
        - IncentiveBalance
        - IncentiveCampaign
      abis:
        - name: GebUniswapRollingDistributionIncentives
          file: ./abis/GebUniswapRollingDistributionIncentives.json
      eventHandlers:
        - event: CampaignAdded(uint256)
          handler: handleCampaignAdded
        - event: Staked(indexed address,uint256)
          handler: handleStaked
        - event: Withdrawn(indexed address,uint256)
          handler: handleWithdrawn
        - event: RewardPaid(indexed address,uint256)
          handler: handleRewardPaid
        - event: DelayReward(address,uint256,uint256,uint256)
          handler: handleDelayReward
        - event: DelayedRewardPaid(indexed address,uint256,uint256)
          handler: handleDelayedRewardPaid
        # - event: ModifyParameters(indexed bytes32,uint256)
        #   handler: handleModifyParameters
        # - event: ModifyParameters(indexed bytes32,uint256,uint256)
        #   handler: handleModifyParameters
        # - event: WithdrewExtraRewardTokens(address,uint256,uint256)
        #   handler: handleWithdrewExtraRewardTokens
  
  - name: ProtToken 
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: DSToken
      address: '{{GEB_PROT}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/token/prot-token.ts
      entities:
        - ERC20Balance
      abis:
        - name: DSToken
          file: ./abis/DSToken.json
      eventHandlers:
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransfer
        # - event: Approval(indexed address,indexed address,uint256)
        #   handler: handleApproval
  
  - name: UniLPToken 
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: ERC20
      address: '{{UNISWAP_COIN_POOL}}'
      startBlock: {{STARTING_BLOCK_NUMBER}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/token/uni-lp-token.ts
      entities:
        - ERC20Balance
      abis:
        - name: ERC20
          file: ./abis/UniswapPair.json
      eventHandlers:
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransfer
        # - event: Approval(indexed address,indexed address,uint256)
        #   handler: handleApproval

templates:
  - name: EnglishCollateralAuctionHouse
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: EnglishCollateralAuctionHouse
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/auctions/english-collateral-auction-house.ts
      entities:
        - CollateralType
        - CollateralAuction
        - EnglishAuctionConfiguration
        - EnglishAuctionBid
      abis:
        - name: EnglishCollateralAuctionHouse
          file: ./abis/EnglishCollateralAuctionHouse.json
      eventHandlers:
        - event: DecreaseSoldAmount(uint256,address,uint256,uint256,uint256)
          handler: handleDecreaseSoldAmount
        - event: IncreaseBidSize(uint256,address,uint256,uint256,uint256)
          handler: handleIncreaseBidSize
        - event: ModifyParameters(bytes32,uint256)
          handler: handleModifyParametersUint
        - event: SettleAuction(uint256)
          handler: handleSettleAuction
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # Remaining events:
        # - event: RestartAuction(uint256,uint256)
        #   handler: handleRestartAuction
        # - event: StartAuction(uint256,uint256,uint256,uint256,uint256,indexed address,indexed address,uint256)
        #   handler: handleStartAuction
        # - event: TerminateAuctionPrematurely(uint256,address,uint256,uint256)
        #   handler: handleTerminateAuctionPrematurely
  
  - name: FixedDiscountCollateralAuctionHouse
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: FixedDiscountCollateralAuctionHouse
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/auctions/discount-collateral-auction-house.ts
      entities:
        - CollateralType
        - FixedDiscountAuction
        - FixedDiscountAuctionConfiguration
        - FixedDiscountAuctionBatch
      abis:
        - name: FixedDiscountCollateralAuctionHouse
          file: ./abis/FixedDiscountCollateralAuctionHouse.json
      eventHandlers:
        - event: ModifyParameters(bytes32,address)
          handler: handleModifyParametersAddress
        - event: ModifyParameters(bytes32,uint256)
          handler: handleModifyParametersUint
        - event: BuyCollateral(uint256,uint256,uint256)
          handler: handleBuyCollateral
        - event: SettleAuction(uint256,uint256)
          handler: handleSettleAuction
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # Remaining events:
        # - event: StartAuction(uint256,uint256,uint256,uint256,uint256,indexed address,indexed address,uint256)
        #   handler: handleStartAuction
        # - event: TerminateAuctionPrematurely(uint256,address,uint256)
        #   handler: handleTerminateAuctionPrematurely

  - name: PreSettlementSurplusAuctionHouse
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: PreSettlementSurplusAuctionHouse
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/auctions/settlement-surplus-auction-houses.ts
      entities:
        - EnglishAuction
        - EnglishAuctionBid
      abis:
        - name: PreSettlementSurplusAuctionHouse
          file: ./abis/PreSettlementSurplusAuctionHouse.json
      eventHandlers:
        - event: ModifyParameters(bytes32,uint256)
          handler: handleModifyParametersPre
        - event: IncreaseBidSize(uint256,address,uint256,uint256,uint256)
          handler: handleIncreaseBidSizePre
        - event: RestartAuction(uint256,uint256)
          handler: handleRestartAuctionPre
        - event: SettleAuction(uint256)
          handler: handleSettleAuctionPre
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # Remaining events:
        # - event: DisableContract()
        #   handler: handleDisableContract
        # - event: StartAuction(uint256,uint256,uint256,uint256,uint256)
        #   handler: handleStartAuction
        # - event: TerminateAuctionPrematurely(uint256,address,address,uint256)
        #   handler: handleTerminateAuctionPrematurely

  - name: DebtAuctionHouse
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: DebtAuctionHouse
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/auctions/debt-auction-house.ts
      entities:
        - CollateralType
        - FixedDiscountAuction
        - FixedDiscountAuctionConfiguration
        - FixedDiscountAuctionBatch
      abis:
        - name: DebtAuctionHouse
          file: ./abis/DebtAuctionHouse.json
      eventHandlers:
        - event: ModifyParameters(bytes32,uint256)
          handler: handleModifyParametersUint
        - event: AddAuthorization(address)
          handler: handleAddAuthorization
        - event: RemoveAuthorization(address)
          handler: handleRemoveAuthorization

        # Remaining events:
        # - event: ModifyParameters(bytes32,address)
        #   handler: handleModifyParametersAddress
        # - event: DecreaseSoldAmount(uint256,address,uint256,uint256,uint256)
        #   handler: handleDecreaseSoldAmount
        # - event: DisableContract(address)
        #   handler: handleDisableContract
        # - event: RestartAuction(uint256,uint256)
        #   handler: handleRestartAuction
        # - event: SettleAuction(uint256,uint256)
        #   handler: handleSettleAuction
        # - event: StartAuction(uint256,uint256,uint256,uint256,indexed address,uint256,uint256)
        #   handler: handleStartAuction
        # - event: TerminateAuctionPrematurely(uint256,address,address,uint256,uint256)  
        #   handler: handleTerminateAuctionPrematurely

  - name: UniswapPair
    kind: ethereum/contract
    network: {{NETWORK}}
    source:
      abi: UniswapPair
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/uniswap/uniswap.ts
      entities:
        - UniswapPair
      abis:
        - name: UniswapPair
          file: ./abis/UniswapPair.json
      eventHandlers:
        - event: Sync(uint112,uint112)
          handler: handleSync
        - event: Swap(indexed address,uint256,uint256,uint256,uint256,indexed address)
          handler: handleSwap
        # - event: Mint(indexed address,uint256,uint256)
        #   handler: handleMint
        # - event: Burn(indexed address,uint256,uint256,indexed address)
        #   handler: handleBurn
        # - event: Transfer(indexed address,indexed address,uint256)
        #   handler: handleTransfer
